version: 2.1
orbs:
  coveralls: coveralls/coveralls@2
  browser-tools: circleci/browser-tools@1
  cypress: cypress-io/cypress@3
  cloudrun: circleci/gcp-cloud-run@1.0.2
commands:
  install:
    description: 'Install project dependencies'
    parameters:
      warm-cache:
        type: boolean
        default: false
    steps:
      - checkout
      - restore_cache:
          keys:
            - node_modules-{{ checksum "package-lock.json" }}
      - when:
          condition: << parameters.warm-cache >>
          steps:
            - run: npm ci
            - save_cache:
                key: node_modules-{{ checksum "package-lock.json" }}
                paths:
                  - node_modules
  lint:
    description: 'Check for code style and linting errors'
    steps:
      - run: npm run style
      - run: npm run lint
  build_and_test:
    description: 'Build command that accepts Angular project name as parameter'
    parameters:
      project:
        type: string
        default: 'local-weather-app'
      run-tests:
        type: boolean
        default: true
    steps:
      - run: npx ng build --configuration production --project << parameters.project >>
      - when:
          condition: << parameters.run-tests >>
          steps:
            - attach_workspace:
                at: ~/
            - browser-tools/install-chrome
            - browser-tools/install-chromedriver
            - run: npx ng test --watch=false --project << parameters.project >> --code-coverage
  store:
    description: 'Stores build_and_test artifacts'
    parameters:
      project:
        type: string
        default: 'local-weather-app'
    steps:
      - store_test_results:
          path: ./test_results
      - store_artifacts:
          path: ./coverage
      - store_artifacts:
          path: ~/cypress

      # upload coverage report to coveralls for readme badge support
      # requires the orbs coveralls: coveralls/coveralls@2
      # requires coveralls account and token named COVERALLS_REPO_TOKEN specific to repo to be stored in CircleCI
      - coveralls/upload
      # https://docs.cypress.io/guides/tooling/code-coverage

      - run:
          name: Tar & Gzip compiled app
          command: tar zcf dist.tar.gz dist/<< parameters.project >>
      - store_artifacts:
          path: dist.tar.gz

      - run:
          name: Move compiled app to workspace
          command: |
            set -exu
            mkdir -p /tmp/workspace/dist
            mv dist/<< parameters.project >> /tmp/workspace/dist/
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - dist/<< parameters.project >>
  deploy_vercel:
    description: 'Deploys project to Vercel --> https://vercel.com'
    parameters:
      project:
        type: string
        default: 'local-weather-app'
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: npx vercel deploy --token $VERCEL_TOKEN --prod /tmp/workspace/dist/<< parameters.project >> --yes
  deploy_cloudrun:
    description: 'Deploys project to Google Cloud Run --> https://cloud.google.com/run'
    parameters:
      project:
        type: string
        default: 'LocalCast Weather'
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Copy built app to dist folder
          command: cp -avR /tmp/workspace/dist/ .
      - cloudrun/init
      - cloudrun/build:
          tag: 'gcr.io/${GOOGLE_PROJECT_ID}/test-${CIRCLE_SHA1}'
          source: ~/repo
      - cloudrun/deploy:
          image: 'gcr.io/${GOOGLE_PROJECT_ID}/test-${CIRCLE_SHA1}'
          platform: managed
          region: us-east1
          service-name: localcast-weather
          unauthenticated: true
      - run:
          command: >
            GCP_API_RESULTS=$(curl -s "$GCP_DEPLOY_ENDPOINT")

            if ! echo "$GCP_API_RESULTS" | grep -nwo "<< parameters.project >>"; then
              echo "Result is unexpected"
              echo 'Result: '
              curl -s "$GCP_DEPLOY_ENDPOINT"
              exit 1;
            fi
          name: Test managed deployed service.
jobs:
  initialize:
    docker:
      - image: cimg/node:lts-browsers
    working_directory: ~/repo
    steps:
      - install:
          warm-cache: true
      - cypress/install
      - persist_to_workspace:
          root: ~/
          paths:
            - .cache/Cypress
  default:
    docker:
      - image: cimg/node:lts-browsers
    working_directory: ~/repo
    steps:
      - install
      - lint
      - build_and_test
      - run: npx ng run local-weather-app:cypress-run
      - store
  deploy:
    docker:
      - image: cimg/node:lts
    working_directory: ~/repo
    steps:
      - deploy_vercel
  deploy_cloudrun:
    docker:
      - image: cimg/node:lts
    working_directory: ~/repo
    steps:
      - deploy_cloudrun

  stage2: # this job is only here to verify sample code from the book, remove it in your own projects
    docker:
      - image: cimg/node:lts-browsers
    working_directory: ~/repo
    steps:
      - install
      - build_and_test:
          project: 'stage2'
  stage3: # this job is only here to verify sample code from the book, remove it in your own projects
    docker:
      - image: cimg/node:lts-browsers
    working_directory: ~/repo
    steps:
      - install
      - build_and_test:
          project: 'stage3'
          run-tests: false
  stage4: # this job is only here to verify sample code from the book, remove it in your own projects
    docker:
      - image: cimg/node:lts-browsers
    working_directory: ~/repo
    steps:
      - install
      - build_and_test:
          project: 'stage4'
  stage5: # this job is only here to verify sample code from the book, remove it in your own projects
    docker:
      - image: cimg/node:lts-browsers
    working_directory: ~/repo
    steps:
      - install
      - build_and_test:
          project: 'stage5'
  stage6: # this job is only here to verify sample code from the book, remove it in your own projects
    docker:
      - image: cimg/node:lts-browsers
    working_directory: ~/repo
    steps:
      - install
      - build_and_test:
          project: 'stage6'
  stage12: # this job is only here to verify sample code from the book, remove it in your own projects
    docker:
      - image: cimg/node:lts-browsers
    working_directory: ~/repo
    steps:
      - install
      - build_and_test:
          project: 'stage12'
  signalStore: # this job is only here to verify sample code from the book, remove it in your own projects
    docker:
      - image: cimg/node:lts-browsers
    working_directory: ~/repo
    steps:
      - install
      - build_and_test:
          project: 'signal-store'
      - run: npx ng run signal-store:cypress-run --spec "cypress/e2e/app.cy.ts,cypress/e2e/simple-search.cy.ts"
workflows:
  build-test-and-approval-deploy:
    jobs:
      - initialize
      - default:
          requires:
            - initialize
      - stage2: # this job is only here to verify sample code from the book, remove it in your own projects
          requires:
            - initialize
      - stage3: # this job is only here to verify sample code from the book, remove it in your own projects
          requires:
            - initialize
      - stage4: # this job is only here to verify sample code from the book, remove it in your own projects
          requires:
            - initialize
      - stage5: # this job is only here to verify sample code from the book, remove it in your own projects
          requires:
            - initialize
      - stage6: # this job is only here to verify sample code from the book, remove it in your own projects
          requires:
            - initialize
      - stage12: # this job is only here to verify sample code from the book, remove it in your own projects
          requires:
            - initialize
      - signalStore: # this job is only here to verify sample code from the book, remove it in your own projects
          requires:
            - initialize
      - deploy:
          context: vercel
          requires:
            - default
          filters:
            branches:
              only: main
      - deploy_cloudrun:
          requires:
            - default
          filters:
            branches:
              only: main
